-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity substitute is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of substitute is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "substitute_substitute,hls_ip_2022_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.181000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=188,HLS_SYN_LUT=356,HLS_VERSION=2022_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_BF : STD_LOGIC_VECTOR (7 downto 0) := "10111111";
    constant ap_const_lv8_3A : STD_LOGIC_VECTOR (7 downto 0) := "00111010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_7A : STD_LOGIC_VECTOR (7 downto 0) := "01111010";
    constant ap_const_lv8_60 : STD_LOGIC_VECTOR (7 downto 0) := "01100000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv8_A : STD_LOGIC_VECTOR (7 downto 0) := "00001010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_r : STD_LOGIC_VECTOR (7 downto 0);
    signal output_r : STD_LOGIC_VECTOR (7 downto 0);
    signal output_r_ap_vld : STD_LOGIC;
    signal key_i : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal substitute_key_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal substitute_key_ce0 : STD_LOGIC;
    signal substitute_key_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal substitute_key_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal substitute_key_ce1 : STD_LOGIC;
    signal substitute_key_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal input_r_read_reg_246 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln15_fu_130_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln15_reg_255 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln23_fu_145_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln23_reg_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_key_i_flag_0_phi_fu_105_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal key_i_flag_0_reg_101 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal select_ln24_fu_192_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_key_i_new_0_phi_fu_117_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal key_i_new_0_reg_113 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln17_fu_140_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_fu_151_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln32_fu_216_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln3_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln21_fu_175_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln15_fu_124_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal diff_fu_156_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln21_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln21_fu_167_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln24_fu_182_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln24_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_fu_200_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_1_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln32_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_1_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln3_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component substitute_substitute_key_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component substitute_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        input_r : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_r : IN STD_LOGIC_VECTOR (7 downto 0);
        output_r_ap_vld : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    substitute_key_U : component substitute_substitute_key_ROM_AUTO_1R
    generic map (
        DataWidth => 8,
        AddressRange => 18,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => substitute_key_address0,
        ce0 => substitute_key_ce0,
        q0 => substitute_key_q0,
        address1 => substitute_key_address1,
        ce1 => substitute_key_ce1,
        q1 => substitute_key_q1);

    control_s_axi_U : component substitute_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        input_r => input_r,
        output_r => output_r,
        output_r_ap_vld => output_r_ap_vld,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    key_i_flag_0_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (icmp_ln15_fu_130_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                key_i_flag_0_reg_101 <= ap_const_lv1_0;
            elsif (((icmp_ln15_reg_255 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                key_i_flag_0_reg_101 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_fu_130_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln23_reg_264 <= add_ln23_fu_145_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln15_reg_255 <= icmp_ln15_fu_130_p2;
                input_r_read_reg_246 <= input_r;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((ap_phi_mux_key_i_flag_0_phi_fu_105_p4 = ap_const_lv1_1) or (or_ln3_fu_234_p2 = ap_const_lv1_1)))) then
                key_i <= select_ln32_fu_216_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_reg_255 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                key_i_new_0_reg_113 <= select_ln24_fu_192_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln15_fu_124_p2 <= std_logic_vector(unsigned(input_r) + unsigned(ap_const_lv8_BF));
    add_ln21_fu_175_p2 <= std_logic_vector(unsigned(select_ln21_fu_167_p3) + unsigned(diff_fu_156_p2));
    add_ln23_fu_145_p2 <= std_logic_vector(unsigned(key_i) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_key_i_flag_0_phi_fu_105_p4_assign_proc : process(icmp_ln15_reg_255, key_i_flag_0_reg_101, ap_CS_fsm_state2)
    begin
        if (((icmp_ln15_reg_255 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_phi_mux_key_i_flag_0_phi_fu_105_p4 <= ap_const_lv1_1;
        else 
            ap_phi_mux_key_i_flag_0_phi_fu_105_p4 <= key_i_flag_0_reg_101;
        end if; 
    end process;


    ap_phi_mux_key_i_new_0_phi_fu_117_p4_assign_proc : process(icmp_ln15_reg_255, ap_CS_fsm_state2, select_ln24_fu_192_p3, key_i_new_0_reg_113)
    begin
        if (((icmp_ln15_reg_255 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_phi_mux_key_i_new_0_phi_fu_117_p4 <= select_ln24_fu_192_p3;
        else 
            ap_phi_mux_key_i_new_0_phi_fu_117_p4 <= key_i_new_0_reg_113;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    diff_fu_156_p2 <= std_logic_vector(unsigned(substitute_key_q1) - unsigned(input_r_read_reg_246));
    icmp_ln15_fu_130_p2 <= "1" when (unsigned(add_ln15_fu_124_p2) < unsigned(ap_const_lv8_3A)) else "0";
    icmp_ln21_fu_161_p2 <= "1" when (signed(diff_fu_156_p2) < signed(ap_const_lv8_1)) else "0";
    icmp_ln24_fu_186_p2 <= "1" when (trunc_ln24_fu_182_p1 = ap_const_lv7_0) else "0";
    icmp_ln32_1_fu_205_p2 <= "1" when (input_r_read_reg_246 = ap_const_lv8_A) else "0";
    icmp_ln32_fu_200_p2 <= "1" when (input_r_read_reg_246 = ap_const_lv8_D) else "0";
    icmp_ln3_1_fu_229_p2 <= "1" when (input_r_read_reg_246 = ap_const_lv8_A) else "0";
    icmp_ln3_fu_224_p2 <= "1" when (input_r_read_reg_246 = ap_const_lv8_D) else "0";
    or_ln32_fu_210_p2 <= (icmp_ln32_fu_200_p2 or icmp_ln32_1_fu_205_p2);
    or_ln3_fu_234_p2 <= (icmp_ln3_fu_224_p2 or icmp_ln3_1_fu_229_p2);

    output_r_assign_proc : process(ap_start, ap_CS_fsm_state1, input_r, icmp_ln15_fu_130_p2, icmp_ln15_reg_255, ap_CS_fsm_state2, add_ln21_fu_175_p2)
    begin
        if (((icmp_ln15_reg_255 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            output_r <= add_ln21_fu_175_p2;
        elsif (((ap_start = ap_const_logic_1) and (icmp_ln15_fu_130_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            output_r <= input_r;
        else 
            output_r <= "XXXXXXXX";
        end if; 
    end process;


    output_r_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln15_fu_130_p2, icmp_ln15_reg_255, ap_CS_fsm_state2)
    begin
        if ((((ap_start = ap_const_logic_1) and (icmp_ln15_fu_130_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((icmp_ln15_reg_255 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            output_r_ap_vld <= ap_const_logic_1;
        else 
            output_r_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln21_fu_167_p3 <= 
        ap_const_lv8_7A when (icmp_ln21_fu_161_p2(0) = '1') else 
        ap_const_lv8_60;
    select_ln24_fu_192_p3 <= 
        ap_const_lv32_0 when (icmp_ln24_fu_186_p2(0) = '1') else 
        add_ln23_reg_264;
    select_ln32_fu_216_p3 <= 
        ap_const_lv32_0 when (or_ln32_fu_210_p2(0) = '1') else 
        ap_phi_mux_key_i_new_0_phi_fu_117_p4;
    substitute_key_address0 <= zext_ln24_fu_151_p1(5 - 1 downto 0);
    substitute_key_address1 <= zext_ln17_fu_140_p1(5 - 1 downto 0);

    substitute_key_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            substitute_key_ce0 <= ap_const_logic_1;
        else 
            substitute_key_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    substitute_key_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            substitute_key_ce1 <= ap_const_logic_1;
        else 
            substitute_key_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln24_fu_182_p1 <= substitute_key_q0(7 - 1 downto 0);
    zext_ln17_fu_140_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(key_i),64));
    zext_ln24_fu_151_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_fu_145_p2),64));
end behav;
