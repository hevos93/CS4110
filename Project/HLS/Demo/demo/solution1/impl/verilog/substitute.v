// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="substitute_substitute,hls_ip_2022_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.181000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=188,HLS_SYN_LUT=356,HLS_VERSION=2022_2}" *)

module substitute (
        ap_clk,
        ap_rst_n,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [7:0] input_r;
reg   [7:0] output_r;
reg    output_r_ap_vld;
reg   [31:0] key_i;
wire   [4:0] substitute_key_address0;
reg    substitute_key_ce0;
wire   [7:0] substitute_key_q0;
wire   [4:0] substitute_key_address1;
reg    substitute_key_ce1;
wire   [7:0] substitute_key_q1;
reg   [7:0] input_r_read_reg_246;
wire   [0:0] icmp_ln15_fu_130_p2;
reg   [0:0] icmp_ln15_reg_255;
wire   [31:0] add_ln23_fu_145_p2;
reg   [31:0] add_ln23_reg_264;
reg   [0:0] ap_phi_mux_key_i_flag_0_phi_fu_105_p4;
reg   [0:0] key_i_flag_0_reg_101;
wire    ap_CS_fsm_state2;
wire   [31:0] select_ln24_fu_192_p3;
reg   [31:0] ap_phi_mux_key_i_new_0_phi_fu_117_p4;
reg   [31:0] key_i_new_0_reg_113;
wire   [63:0] zext_ln17_fu_140_p1;
wire   [63:0] zext_ln24_fu_151_p1;
wire   [31:0] select_ln32_fu_216_p3;
wire   [0:0] or_ln3_fu_234_p2;
wire   [7:0] add_ln21_fu_175_p2;
wire   [7:0] add_ln15_fu_124_p2;
wire   [7:0] diff_fu_156_p2;
wire   [0:0] icmp_ln21_fu_161_p2;
wire   [7:0] select_ln21_fu_167_p3;
wire   [6:0] trunc_ln24_fu_182_p1;
wire   [0:0] icmp_ln24_fu_186_p2;
wire   [0:0] icmp_ln32_fu_200_p2;
wire   [0:0] icmp_ln32_1_fu_205_p2;
wire   [0:0] or_ln32_fu_210_p2;
wire   [0:0] icmp_ln3_1_fu_229_p2;
wire   [0:0] icmp_ln3_fu_224_p2;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 key_i = 32'd0;
end

substitute_substitute_key_ROM_AUTO_1R #(
    .DataWidth( 8 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
substitute_key_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(substitute_key_address0),
    .ce0(substitute_key_ce0),
    .q0(substitute_key_q0),
    .address1(substitute_key_address1),
    .ce1(substitute_key_ce1),
    .q1(substitute_key_q1)
);

substitute_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .input_r(input_r),
    .output_r(output_r),
    .output_r_ap_vld(output_r_ap_vld),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (icmp_ln15_fu_130_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        key_i_flag_0_reg_101 <= 1'd0;
    end else if (((icmp_ln15_reg_255 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        key_i_flag_0_reg_101 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_130_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln23_reg_264 <= add_ln23_fu_145_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln15_reg_255 <= icmp_ln15_fu_130_p2;
        input_r_read_reg_246 <= input_r;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ((ap_phi_mux_key_i_flag_0_phi_fu_105_p4 == 1'd1) | (or_ln3_fu_234_p2 == 1'd1)))) begin
        key_i <= select_ln32_fu_216_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_reg_255 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        key_i_new_0_reg_113 <= select_ln24_fu_192_p3;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln15_reg_255 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_phi_mux_key_i_flag_0_phi_fu_105_p4 = 1'd1;
    end else begin
        ap_phi_mux_key_i_flag_0_phi_fu_105_p4 = key_i_flag_0_reg_101;
    end
end

always @ (*) begin
    if (((icmp_ln15_reg_255 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_phi_mux_key_i_new_0_phi_fu_117_p4 = select_ln24_fu_192_p3;
    end else begin
        ap_phi_mux_key_i_new_0_phi_fu_117_p4 = key_i_new_0_reg_113;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln15_reg_255 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        output_r = add_ln21_fu_175_p2;
    end else if (((ap_start == 1'b1) & (icmp_ln15_fu_130_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        output_r = input_r;
    end else begin
        output_r = 'bx;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b1) & (icmp_ln15_fu_130_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((icmp_ln15_reg_255 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        output_r_ap_vld = 1'b1;
    end else begin
        output_r_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        substitute_key_ce0 = 1'b1;
    end else begin
        substitute_key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        substitute_key_ce1 = 1'b1;
    end else begin
        substitute_key_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln15_fu_124_p2 = ($signed(input_r) + $signed(8'd191));

assign add_ln21_fu_175_p2 = (select_ln21_fu_167_p3 + diff_fu_156_p2);

assign add_ln23_fu_145_p2 = (key_i + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign diff_fu_156_p2 = (substitute_key_q1 - input_r_read_reg_246);

assign icmp_ln15_fu_130_p2 = ((add_ln15_fu_124_p2 < 8'd58) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_161_p2 = (($signed(diff_fu_156_p2) < $signed(8'd1)) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_186_p2 = ((trunc_ln24_fu_182_p1 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln32_1_fu_205_p2 = ((input_r_read_reg_246 == 8'd10) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_200_p2 = ((input_r_read_reg_246 == 8'd13) ? 1'b1 : 1'b0);

assign icmp_ln3_1_fu_229_p2 = ((input_r_read_reg_246 == 8'd10) ? 1'b1 : 1'b0);

assign icmp_ln3_fu_224_p2 = ((input_r_read_reg_246 == 8'd13) ? 1'b1 : 1'b0);

assign or_ln32_fu_210_p2 = (icmp_ln32_fu_200_p2 | icmp_ln32_1_fu_205_p2);

assign or_ln3_fu_234_p2 = (icmp_ln3_fu_224_p2 | icmp_ln3_1_fu_229_p2);

assign select_ln21_fu_167_p3 = ((icmp_ln21_fu_161_p2[0:0] == 1'b1) ? 8'd122 : 8'd96);

assign select_ln24_fu_192_p3 = ((icmp_ln24_fu_186_p2[0:0] == 1'b1) ? 32'd0 : add_ln23_reg_264);

assign select_ln32_fu_216_p3 = ((or_ln32_fu_210_p2[0:0] == 1'b1) ? 32'd0 : ap_phi_mux_key_i_new_0_phi_fu_117_p4);

assign substitute_key_address0 = zext_ln24_fu_151_p1;

assign substitute_key_address1 = zext_ln17_fu_140_p1;

assign trunc_ln24_fu_182_p1 = substitute_key_q0[6:0];

assign zext_ln17_fu_140_p1 = key_i;

assign zext_ln24_fu_151_p1 = add_ln23_fu_145_p2;

endmodule //substitute
